@page "/"
@using System.Text;
@inject IDownloadService downloadService
@inject IHttpContextAccessor httpContextAccessor
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JS


<PageTitle>Download Platform</PageTitle>

<div class="card">
    <div class="card-header">
        Download To Server
    </div>
    <div class="card-body">
        <div class="form-group">
            <input name="Link" @bind="@currentLink" class="form-control" id="link" placeholder="Enter link here">
        </div>
        <br />
        <center>
            <button @onclick="DownloadLink" class="btn btn-success ">Download To Server</button>
        </center>
    </div>
</div>


@{
    if (DownloadService.fileNameUrlDownloading.Count != 0)
    {
        <br />
        <div class="card">
            <div class="card-header">
                Downloading
            </div>
            <div class="card-body">
                <div class=" table-responsive">
                    <table class="table table-striped ">
                        <thead>
                            <tr>
                                <th scope="col">Copy download Link</th>
                                <th scope="col">File Name</th>
                                <th scope="col">Total Size</th>
                                <th scope="col">Downloaded Size</th>http://5.161.110.119/Downloadables/test.txt
                                <th scope="col">Progress</th>
                                <th scope="col">Cancel</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (var item in DownloadService.fileNameUrlDownloading)
                                {
                                    <tr>
                                        <td><button class="btn btn-primary btn-lg oi oi-layers" @onclick="() => copyLinkToClipboard(item.url)"></button></td>
                                        <td class="w-50 text-break">@item.fileName</td>
                                        <td>@($"{item.downloadFileSize ?? 0} bytes")</td>
                                        <td>@(item.downloadedSize == 0L ? "" : $"{item.downloadedSize} bytes")</td>
                                        <td>@(item.processPercent == null ? "" : $"{item.processPercent:0.##}%") </td>
                                        <td><button class="btn btn-danger btn-lg oi oi-ban" @onclick="() => cancelItem(item.url)"></button></td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
}
@{
    if (DownloadService.fileNameUrlDownnloaded.Count != 0)
    {
        <br />
        <div class="card">
            <div class="card-header">
                Downloaded
            </div>
            <div class="card-body">
                <ul class="list-group" id="item-list">
                    <!-- Example item with remove button -->
                    @{
                        foreach (var item in DownloadService.fileNameUrlDownnloaded)
                        {
                            var link = $@"{_baseURL}/{Program.downloadFolder}/{item}";
                            <li style="background:cornsilk" class="list-group-item d-flex justify-content-between align-items-center text-break">
                                <a download href="@link">@item</a>
                                <div>
                                    <a download="" href="@link"><button class="btn btn-sucess btn-lg oi oi-data-transfer-download"></button></a>
                                    <button class="btn btn-danger btn-lg oi oi-delete" @onclick="() => deleteItem(item)"></button>
                                </div>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    }
}

@code {
    string _baseURL = string.Empty;
    private string currentLink { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        DownloadService.fileNameUrlDownnloaded.Clear();
        // Dont Show file as downloaded while downloading
        var files = new DirectoryInfo(Program.downloadRootPath).GetFiles().Where(f => !DownloadService.fileNameUrlDownloading.Any(x => x.fileName == f.Name));
        foreach (var item in files)
            DownloadService.fileNameUrlDownnloaded.Add(item.Name);

        _baseURL = $"{httpContextAccessor?.HttpContext?.Request.Scheme}://{httpContextAccessor?.HttpContext?.Request.Host}";
    }
    private async void DownloadLink()
    {
        if (string.IsNullOrEmpty(currentLink))
        {
            ToastService.ShowWarning("Please Enter Your Link To Download");
            return;
        }

        Uri uri = null;
        try
        {
            uri = new Uri(currentLink);
        }
        catch
        {
            ToastService.ShowError("please Enter A Valid Url");
            return;
        }

        var fileName = uri.Segments.Last();
        var res = await downloadService.DownloadFromUrlAsync(() => { this.StateHasChanged(); return true; }, Program.downloadRootPath, currentLink, fileName);
        if (!res)
            ToastService.ShowError($"Problem With Download {fileName}");
    }
    protected async Task copyLinkToClipboard(string text)
    {
        await JS.InvokeVoidAsync("clipboardCopy.copyText", text);
    }
    protected async Task cancelItem(string key)
    {
        await DownloadService.removeDownloadingItem(key, Program.downloadRootPath, removeFileAlso: false);
    }
    protected void deleteItem(string fileName)
    {
        DownloadService.removeDownloadedItem(fileName, Program.downloadRootPath);
    }
}


