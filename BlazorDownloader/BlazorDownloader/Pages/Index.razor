@page "/"
@using System.Text;
@inject IDownloadService downloadService
@inject IHttpContextAccessor httpContextAccessor
@inject Blazored.Toast.Services.IToastService ToastService
@inject IJSRuntime JS

<PageTitle>Download Platform</PageTitle>

<div class="card">
    <div class="card-header">
        Download To Server
    </div>
    <div class="card-body">
        <div class="form-group">
            <input name="Link" @bind="@currentLink" class="form-control" id="link" placeholder="Enter link here">
        </div>
        <br />
        <center>
            <button @onclick="DownloadLink" class="btn btn-success ">Download To Server</button>
            <button @onclick="DownloadFromUrlAsyncDirect" class="btn btn-info ">Download Directly</button>
        </center>
    </div>
</div>


@{
    if (DownloadService.fileNameUrlDownloading.Count != 0)
    {
        <br />
        <div class="card">
            <div class="card-header">
                Downloading
            </div>
            <div class="card-body">
                <ul class="list-group" id="item-list">
                    <!-- Example item with remove button -->
                    @{
                        foreach (var item in DownloadService.fileNameUrlDownloading)
                        {
                            <li style="background:ivory" class="list-group-item d-flex justify-content-between align-items-center">
                                <span>@item.fileName - @item.url@(item.processPercent == null ? "" : $" - {item.processPercent:0.##}%")</span>
                                <button class="btn btn-danger btn-lg oi oi-ban" @onclick="() => cancelItem(item.url)"></button>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    }
}

@{
    if (DownloadService.fileNameUrlDownnloaded.Count != 0)
    {
        <br />
        <div class="card">
            <div class="card-header">
                Downloaded
            </div>
            <div class="card-body">
                <ul class="list-group" id="item-list">
                    <!-- Example item with remove button -->
                    @{
                        foreach (var item in DownloadService.fileNameUrlDownnloaded)
                        {
                            <li style="background:cornsilk" class="list-group-item d-flex justify-content-between align-items-center">
                                <a download href="@($@"{_baseURL}/{Program.downloadFolder}/{item}")">@item</a>
                                <button class="btn btn-danger btn-lg oi oi-delete" @onclick="() => deleteItem(item)"></button>
                            </li>
                        }
                    }
                </ul>
            </div>
        </div>
    }
}

@code {
    // [Inject]
    // private IDownloadService downloadService { get; set; }

    string _baseURL = string.Empty;

    private string currentLink { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        DownloadService.fileNameUrlDownnloaded.Clear();
        var files = new DirectoryInfo(Program.downloadRootPath).GetFiles();
        foreach (var item in files)
            DownloadService.fileNameUrlDownnloaded.Add(item.Name);

        _baseURL = $"{httpContextAccessor?.HttpContext?.Request.Scheme}://{httpContextAccessor?.HttpContext?.Request.Host}";
    }

    // private Stream GetFileStream()
    // {
    //     var randomBinaryData = new byte[50 * 1024];
    //     var fileStream = new MemoryStream(randomBinaryData);

    //     return fileStream;
    // }

    // private async Task DownloadFileFromStream()
    // {
    //     var fileStream = GetFileStream();
    //     var fileName = "log.bin";

    //     using var streamRef = new DotNetStreamReference(stream: fileStream);

    //     await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    // }


    // private async Task DownloadFile()
    // {
    //     // Generate the file content (e.g., a text file)
    //     byte[] fileContent = Encoding.UTF8.GetBytes("Hello, Blazor!");

    //     // Set the file's name and content type
    //     string fileName = "example.txt";
    //     string contentType = "text/plain";

    //     // Trigger the download
    //     await JSRuntime.InvokeAsync<object>("downloadFile", fileName, contentType, fileContent);
    // }

    public async void DownloadFromUrlAsyncDirect()
    {
        if (string.IsNullOrEmpty(currentLink))
        {
            ToastService.ShowWarning("Please Enter Your Link To Download");
            return;
        }

        Uri uri = null;
        try
        {
            uri = new Uri(currentLink);
        }
        catch
        {
            ToastService.ShowError("please Enter A Valid Url");
            return;
        }

        var fileName = uri.Segments.Last();


        try
        {
            var net = new System.Net.WebClient();
            var data = net.DownloadData(currentLink);
            var content = new MemoryStream(data);
            using var streamRef = new DotNetStreamReference(stream: content);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        }
        catch
        {
            ToastService.ShowError($"Problem With Download {fileName}");
        }

        return;
    }

    private async void DownloadLink()
    {
        if (string.IsNullOrEmpty(currentLink))
        {
            ToastService.ShowWarning("Please Enter Your Link To Download");
            return;
        }

        Uri uri = null;
        try
        {
            uri = new Uri(currentLink);
        }
        catch
        {
            ToastService.ShowError("please Enter A Valid Url");
            return;
        }

        var fileName = uri.Segments.Last();
        var res = await downloadService.DownloadFromUrlAsync(() => { this.StateHasChanged(); return true; }, Program.downloadRootPath, currentLink, fileName);
        if (!res)
            ToastService.ShowError($"Problem With Download {fileName}");
    }

    protected void cancelItem(string key)
    {
        DownloadService.removeDownloadingItem(key);
    }
    protected void deleteItem(string fileName)
    {
        DownloadService.removeDownloadedItem(fileName, Program.downloadRootPath);
    }
}
